# CoronaSV - SV Hackathon 2020 - Max Marin Notes

### Maximillian Marin
### mgmarin@g.harvard.edu



### Outline of initial steps to get setup ###

#### A) Setup GitHub and init repo on Desktop
#### B) Setup access to the DNA-Nexus service
#### C) Download test data LOCALLY
#### D) Setup Snakemake workflow for Assembly and SV calling 





#### A) Setup GitHub and init repo on Desktop #####
 
mkdir ~/Documents/SV_Hackathon2020
cd ~/Documents/SV_Hackathon2020

git clone https://github.com/collaborativebioinformatics/coronasv.git


# Organize GitHub Repo Directories

# Useful Links: 
1) https://stackoverflow.com/questions/27702452/loop-through-a-comma-separated-shell-variable
2) http://www.tldp.org/LDP/abs/html/string-manipulation.html


### Make Directories:

CoronaSV_RepoDir="/home/mgmarin/Documents/SV_Hackathon2020/coronasv"

cd ${CoronaSV_RepoDir}


# Create GitIgnore for Repo

touch .gitignore



MGM_CoronaSV_RepoDir="${CoronaSV_RepoDir}/Assembly-Based-SV-Detection-Pipeline"

mkdir ${MGM_CoronaSV_RepoDir}

touch ${MGM_CoronaSV_RepoDir}/MGM_Assembly_Based_SV_Detection_Pipeline_README.md


listOf_DIRs="JupyterNotebooks, Notes, Scripts, Plots, Data, References, Envs, runInfo_TSVs"

for dir_name in ${listOf_DIRs//,/ }
do
    echo "Making ${dir_name} and README.md file"
    mkdir ${MGM_CoronaSV_RepoDir}/${dir_name}
    touch ${MGM_CoronaSV_RepoDir}/${dir_name}/${dir_name}_README.md
done





# Make LargeReferences Directory and add to .gitignore

echo "coronasv/Assembly-Based-SV-Detection-Pipeline/References/*" >> .gitignore
echo "coronasv/Assembly-Based-SV-Detection-Pipeline/Data/*" >> .gitignore
echo "coronasv/Assembly-Based-SV-Detection-Pipeline/.snakemake/*" >> .gitignore



###################### END A) ######################







# Setting up the DNA Nexus Cloud workstation

https://documentation.dnanexus.com/developer/cloud-workstations/cloud-workstation

https://documentation.dnanexus.com/downloads#DNAnexus-Platform-SDK

https://documentation.dnanexus.com/getting-started/tutorials/cli-quickstart


# 1) Login to DNA Nexus from the commandline
dx login 

Username: mgmarin5
Password: ****

# 2) Config SSH
dx ssh_config

### Choose project
dx select coronasv


# Connect to Workstation through SSH

dx run app-cloud_workstation --ssh

wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh

bash Miniconda3-latest-Linux-x86_64.sh

source ~/.bashrc



https://docs.conda.io/en/latest/miniconda.html#linux-installers

conda 

unset DX_WORKSPACE_ID

dx cd $DX_PROJECT_CONTEXT_ID:

dx download










#### C) Download test data LOCALLY

# Download:
### 1 ONT Run (1 FASTQ)
### 1 Illumina Run (2 FASTQs)





#### D) Setup Snakemake workflow for Assembly and SV calling 



CoronaSV_InputData_TestDir="/mnt/HD1TB/CoronaSV_InputData_V1"


mkdir ${CoronaSV_InputData_TestDir}

cd ${CoronaSV_InputData_TestDir}


### https://www.ncbi.nlm.nih.gov/sra/SRX7777160

### SRR11140750 

### SRS6189914_1.fastq as SRR11140750_1.fastq
### SRS6189914_2.fastq as SRR11140750_2.fastq



dx download raw_input/SRS6189914_1.fastq -o SRR11140750_1.fastq
dx download raw_input/SRS6189914_2.fastq -o SRR11140750_2.fastq




# Nanopore Data - (swab_ONT)

### SRR11140751

SRS6189915.fastq as SRR11140751.fastq

dx download raw_reads_sars_cov_2/SRS6189915.fastq -o SRR11140751.fastq


# Nanopore Data - (SARS-CoV-2 veroSTAT-1KO_ONT)

### SRR11140745

SRS6189920.fastq as SRR11140745.fastq

dx download raw_reads_sars_cov_2/SRS6189920.fastq -o SRR11140745.fastq




# Let's try to download some data with 

conda activate sratools_2_10_7

fastq-dump --split-files SRR11140745


conda activate sratools_2_10_7

cd /n/scratch3/users/m/mm774/

target_FQ_Dump_Dir="/n/scratch3/users/m/mm774/FQ_Dump_CoronaSV_TestDir"

mkdir ${target_FQ_Dump_Dir}

cd ${target_FQ_Dump_Dir}

fastq-dump --split-files SRR11140750 --outdir ${target_FQ_Dump_Dir}


fastq-dump --split-files SRR11140745 --outdir ${target_FQ_Dump_Dir}

fastq-dump SRR11140745 --outdir ${target_FQ_Dump_Dir}






# Installing Snakemake and other software (https://snakemake.readthedocs.io/en/stable/getting_started/installation.html)

conda create -c conda-forge -c bioconda -n SV_Hack_V1 mamba


conda activate SV_Hack_V1


conda install snakemake 

#mamba install samtools bcftools openssl=1.0 bioawk jupyterlab pandas numpy matplotlib seaborn


conda install -c conda-forge minimap2 bcftools bioawk jupyterlab pandas matplotlib seaborn

conda install sra-tools

conda install svanalyzer


## EXPORT SV_Hack_V1 environment ##

conda activate SV_Hack_V1

CoronaSV_RepoDir="/home/mgmarin/Documents/SV_Hackathon2020/coronasv"
MGM_CoronaSV_RepoDir="${CoronaSV_RepoDir}/Assembly-Based-SV-Detection-Pipeline"


cd ${MGM_CoronaSV_RepoDir}

conda env export > Envs/SV_Hack_V1.yml 



## svanalyzer - SVrefine


SVrefine -man

SVrefine --delta <path to delta file of alignments> --regions <path to BED-formatted file of regions> --ref_fasta <path to reference multi-FASTA file> --query_fasta <path to query multi-FASTA file> --outvcf <path to output VCF file> --svregions <path to bed file of widened SV regions> --outref <path to bed file of homozygous reference regions> --nocov <path to bed file of regions with no coverage> --includeseqs



SVrefine
 --delta <path to delta file of alignments>
 --regions <path to BED-formatted file of regions>
 --ref_fasta <path to reference multi-FASTA file>
 --query_fasta <path to query multi-FASTA file>
 --outvcf <path to output VCF file>
 --svregions <path to output BED file of SV regions>
 --outref <path to bed file of homozygous reference regions>
 --refname "NC_045512.2"
 --samplename {SAMPLE_ID}









## Unicycler

conda create -n unicycler_4_8 -c bioconda unicycler bcftools

conda activate unicycler_4_8

conda env export > Envs/unicycler_4_8.yml






conda activate SV_Hack_V1


Cov2_Ref="CovidRef.fasta"



cd /home/mgmarin/Documents/SV_Hackathon_InitTest

minimap2 -ax asm5 ${Cov2_Ref} SRR11140745_SPAdes_Assembly.fasta > SRR11140745_SPAdes_Assembly.sam

samtools view -bS SRR11140745_SPAdes_Assembly.sam | samtools sort - > SRR11140745_SPAdes_Assembly.bam

samtools index SRR11140745_SPAdes_Assembly.bam










conda activate SV_Hack_V1

CoronaSV_RepoDir="/home/mgmarin/Documents/SV_Hackathon2020/coronasv"
MGM_CoronaSV_RepoDir="${CoronaSV_RepoDir}/Assembly-Based-SV-Detection-Pipeline"


cd ${MGM_CoronaSV_RepoDir}

mkdir ${targetOutput_Dir}

inputConfigFile="./SMK_config_V1.txt"


#input_SampleInfo_TSV="./runInfo_TSVs/Test_RunInfo_1Illumina_1ONT.tsv"

input_SampleInfo_TSV="./runInfo_TSVs/Test_RunInfo_1Illumina_1ONT_V2.tsv"


targetOutput_Dir="/mnt/HD1TB/CoronaSV_Analysis_OutputDir_V1"

snakemake -s CoronaSV_AssemblyBasedSVCalling_V1.smk --config output_dir=${targetOutput_Dir} inputSampleData_TSV=${input_SampleInfo_TSV} --configfile ${inputConfigFile} -np --cores 3 


snakemake -s CoronaSV_AssemblyBasedSVCalling_V1.smk --config output_dir=${targetOutput_Dir} inputSampleData_TSV=${input_SampleInfo_TSV} --configfile ${inputConfigFile} -np --dag --use-conda | dot -Tsvg > DAGs/TestRun_1_ONT_1_Illumina_dag.svg


snakemake -s CoronaSV_AssemblyBasedSVCalling_V1.smk --config output_dir=${targetOutput_Dir} inputSampleData_TSV=${input_SampleInfo_TSV} --configfile ${inputConfigFile} -p --use-conda --cores 3 











conda activate SV_Hack_V1

CoronaSV_RepoDir="/home/mgmarin/Documents/SV_Hackathon2020/coronasv"
MGM_CoronaSV_RepoDir="${CoronaSV_RepoDir}/Assembly-Based-SV-Detection-Pipeline"


cd ${MGM_CoronaSV_RepoDir}

mkdir ${targetOutput_Dir}

inputConfigFile="./SMK_config_V1.txt"


input_SampleInfo_TSV="./runInfo_TSVs/201013_CoronaSV_Metadata_V2_Ten_Illumina_PE_Runs_Only_TestSubset.tsv"


targetOutput_Dir="/mnt/HD1TB/CoronaSV_Analysis_OutputDir_V2"

mkdir ${targetOutput_Dir}

snakemake -s CoronaSV_AssemblyBasedSVCalling_V2.smk --config output_dir=${targetOutput_Dir} inputSampleData_TSV=${input_SampleInfo_TSV} --configfile ${inputConfigFile} -np --cores 3 


snakemake -s CoronaSV_AssemblyBasedSVCalling_V2.smk --config output_dir=${targetOutput_Dir} inputSampleData_TSV=${input_SampleInfo_TSV} --configfile ${inputConfigFile} -np --dag --use-conda | dot -Tsvg > DAGs/TestRun_10_IlluminaRuns_dag.svg

snakemake -s CoronaSV_AssemblyBasedSVCalling_V2.smk --config output_dir=${targetOutput_Dir} inputSampleData_TSV=${input_SampleInfo_TSV} --configfile ${inputConfigFile} -p --use-conda --cores 3 




### NOTE: Assembly is working for the 10 Illumina WGS PE runs



# Next steps:

1) Pull & Push changes to github repo
2) Write jupyter notebook which parses the MetaData TSV into 2 categories

	A) Illumina WGS PE of SARS-Cov-2 
	B) ONT WGS of SARS-Cov-2

2.B) Additionally, write code which creates two Pandas Dataframes (1 each for ONT and Illumina WGS RunIDs)


3) Move Repo to O2

4) Get pipeline running on O2





#### 2) Write jupyter notebook which parses the MetaData TSV into 2 categories

conda activate SV_Hack_V1

CoronaSV_RepoDir="/home/mgmarin/Documents/SV_Hackathon2020/coronasv"
MGM_CoronaSV_RepoDir="${CoronaSV_RepoDir}/Assembly-Based-SV-Detection-Pipeline"

cd ${MGM_CoronaSV_RepoDir}






















-o






#### 

## Clone repo and create "SV_Hack_V1" conda env


cd /n/data1/hms/dbmi/farhat/mm774/Snakemake_Pipelines

git clone https://github.com/collaborativebioinformatics/coronasv.git


Corona_SV_O2_Dir="/n/data1/hms/dbmi/farhat/mm774/Snakemake_Pipelines/coronasv"
MGM_CoronaSV_O2_RepoDir="${Corona_SV_O2_Dir}/Assembly-Based-SV-Detection-Pipeline"


cd ${MGM_CoronaSV_O2_RepoDir}


conda env create -f ./Envs/SV_Hack_V1.yml -n SV_Hack_V1







# 1) Login to DNA Nexus from the commandline
dx login 

Username: mgmarin5
Password: ****

# 2) Config SSH
dx ssh_config

### Choose project
dx select coronasv





cd ${MGM_CoronaSV_O2_RepoDir}

cd /n/scratch3/users/m/mm774/CoronaSV_Analysis_OutputDir_V3

dx download --recursive raw_reads_sars_cov_2/

### NEW LOCATION OF DOWNLOADED READS


/n/scratch3/users/m/mm774/CoronaSV_Analysis_OutputDir_V3/raw_reads_sars_cov_2/



srun -p priority --pty -n 1 --mem 3G -t 0-11:59 /bin/bash


conda activate SV_Hack_V1

Corona_SV_O2_Dir="/n/data1/hms/dbmi/farhat/mm774/Snakemake_Pipelines/coronasv"
MGM_CoronaSV_O2_RepoDir="${Corona_SV_O2_Dir}/Assembly-Based-SV-Detection-Pipeline"


cd ${MGM_CoronaSV_O2_RepoDir}


inputConfigFile="./SMK_config_V1.txt"

input_Slurm_Cluster_Config="./clusterConfig_Slurm_V1.json"


input_SampleInfo_TSV="./runInfo_TSVs/CoronaSV_metadata_PairedData_ONT_And_Illumina_ONLY.tsv"


targetOutput_Dir="/n/scratch3/users/m/mm774/CoronaSV_Analysis_OutputDir_V3"

mkdir ${targetOutput_Dir}


snakemake -s CoronaSV_AssemblyBasedSVCalling_IlluminaOnly_V4.smk --config output_dir=${targetOutput_Dir} inputSampleData_TSV=${input_SampleInfo_TSV} --configfile ${inputConfigFile} -np --cores 3 



snakemake -s CoronaSV_AssemblyBasedSVCalling_IlluminaOnly_V4.smk --config output_dir=${targetOutput_Dir} inputSampleData_TSV=${input_SampleInfo_TSV} --configfile ${inputConfigFile} -np --dag --use-conda | dot -Tsvg > DAGs/TestRun_10_IlluminaRuns_dag.svg



snakemake -s CoronaSV_AssemblyBasedSVCalling_IlluminaOnly_V4.smk --config output_dir=${targetOutput_Dir} inputSampleData_TSV=${input_SampleInfo_TSV} --configfile ${inputConfigFile} -p --cores 1 --use-conda


## Run on O2

mkdir -p ${targetOutput_Dir}/O2logs/cluster/

snakemake -s CoronaSV_AssemblyBasedSVCalling_IlluminaOnly_V4.smk --config output_dir=${targetOutput_Dir} inputSampleData_TSV=${input_SampleInfo_TSV} --configfile ${inputConfigFile} -p --use-conda -j 30 --cluster-config ${input_Slurm_Cluster_Config} --cluster "sbatch -p {cluster.p} -n {cluster.n}  -t {cluster.t} --mem {cluster.mem} -o {cluster.o} -e {cluster.e}" --latency-wait 20 -k 




snakemake -s CoronaSV_AssemblyBasedSVCalling_IlluminaOnly_V4.smk --config output_dir=${targetOutput_Dir} inputSampleData_TSV=${input_SampleInfo_TSV} --configfile ${inputConfigFile} -p -j 30 --cluster-config ${input_Slurm_Cluster_Config} --cluster "sbatch -p {cluster.p} -n {cluster.n}  -t {cluster.t} --mem {cluster.mem} -o {cluster.o} -e {cluster.e}" --latency-wait 20 -k --rerun-incomplete








#
#### O2 is not working!!!



### SOLUTION: USE DNAnexus resources!!!





# Connect to Workstation through SSH

dx run --instance-type-help



#dx run --instance-type mem1_ssd1_x16 app-cloud_workstation --ssh 

dx run app-cloud_workstation --ssh 


unset DX_WORKSPACE_ID
dx cd $DX_PROJECT_CONTEXT_ID:


wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh

bash Miniconda3-latest-Linux-x86_64.sh

source ~/.bashrc




cd ~

git clone https://github.com/collaborativebioinformatics/coronasv.git


Corona_SV_O2_Dir="/home/dnanexus/coronasv"
MGM_CoronaSV_O2_RepoDir="${Corona_SV_O2_Dir}/Assembly-Based-SV-Detection-Pipeline"


cd ${MGM_CoronaSV_O2_RepoDir}


conda env create -f ./Envs/SV_Hack_V1.yml -n SV_Hack_V1







conda activate SV_Hack_V1

Corona_SV_O2_Dir="/home/dnanexus/coronasv"
MGM_CoronaSV_O2_RepoDir="${Corona_SV_O2_Dir}/Assembly-Based-SV-Detection-Pipeline"


cd ${MGM_CoronaSV_O2_RepoDir}


inputConfigFile="./SMK_config_V1.txt"

input_Slurm_Cluster_Config="./clusterConfig_Slurm_V1.json"


input_SampleInfo_TSV="./runInfo_TSVs/CoronaSV_metadata_PairedData_ONT_And_Illumina_ONLY.tsv"


targetOutput_Dir="/n/scratch3/users/m/mm774/CoronaSV_Analysis_OutputDir_V3"

mkdir ${targetOutput_Dir}


snakemake -s CoronaSV_AssemblyBasedSVCalling_IlluminaOnly_V4.smk --config output_dir=${targetOutput_Dir} inputSampleData_TSV=${input_SampleInfo_TSV} --configfile ${inputConfigFile} -np  



snakemake -s CoronaSV_AssemblyBasedSVCalling_IlluminaOnly_V4.smk --config output_dir=${targetOutput_Dir} inputSampleData_TSV=${input_SampleInfo_TSV} --configfile ${inputConfigFile} -np --dag --use-conda | dot -Tsvg > DAGs/TestRun_10_IlluminaRuns_dag.svg



snakemake -s CoronaSV_AssemblyBasedSVCalling_IlluminaOnly_V4.smk --config output_dir=${targetOutput_Dir} inputSampleData_TSV=${input_SampleInfo_TSV} --configfile ${inputConfigFile} -p --cores 8 --use-conda








